Update the dob of emp no 101

update exemp
set dob='2021-03-21'
where eno=101;

display the name of the emp whose gender is male and sal is more than 1000
select ename
from exemp
where gender = 'm'
and
salary>1000

display names of employee who have a valid passport
is null
SELECT ename
FROM exemp
WHERE passport IS NOT NULL

display name of emp who are either wfh or wfo
select ename
from exemp
where workmode like 'wfh'
or
workmode like 'wfo';

display the employee detail in ascending order of thier salary
SELECT *
FROM exemp
ORDER BY salary ASC

display the employee detail in ascending order of thier salary if there are multiple peoplw with the same salary the 
order them by thier name in asc order
SELECT *
FROM exemp
ORDER BY salary ASC , ename ASC


display the count of males & female employees
SELECT gender, COUNT( * )
FROM exemp
GROUP BY gender

change the name of the count(*) column in the output to 'Number Of Employees'
SELECT gender, COUNT( * ) as 'Number Of Employees'
FROM exemp
GROUP BY gender
ORDER BY gender DESC


display average salary of each gender
SELECT gender, AVG( salary ) AS 'Average Salary'
FROM exemp
GROUP BY gender

display count of employee in each workmode
select workmode,count(*) as 'Count Of Employees'
from exemp
group by workmode;


display the workmode in which more than 2 employees are operating
select workmode,count(workmode) as 'Count Of Employee' 
from exemp
group by workmode
having count(workmode)>2;


display name of the employee earning maximum salary
SELECT ename
FROM exemp
WHERE salary = (
SELECT MAX( salary )
FROM exemp )



SELECT ename
FROM exemp
WHERE salary > (
SELECT AVG( salary )
FROM exemp
WHERE gender LIKE 'm' )


ALL operator
solution 1:
display name of female emp whose salary is greater than all the males
select ename from exemp 
where gender like 'f' 
and 
salary > ALL (select salary from exemp where gender like 'm');

solution 2:
select ename from exemp 
where gender like 'f' 
and 
salary >(select max(salary) from exemp where gender like 'm');


ANY OPERATOR
display name of female emp whose salary is greater than any the males
SELECT ename
FROM exemp
WHERE gender LIKE 'f'
AND salary > ANY(
SELECT salary
FROM exemp
WHERE gender LIKE 'm'
)

IN operator
question display names of employee whose workmode is wfo or wfh
SELECT ename
FROM exemp
WHERE workmode IN('wfo','wfh');


View
create a view which displays only the empname,gender & age

create view newyeargifts
as
select ename,gender,age
from exemp;
select * from newyeargifts



1 : 1
CREATE TABLE newcm(
cmno INT( 5 ) AUTO_INCREMENT ,
cmname VARCHAR( 10 ) NOT NULL ,
age INT( 3 ) ,
gen CHAR,
PRIMARY KEY ( cmno ) );


create table state(
sno int(5) auto_increment,
sname varchar(15),
capcity varchar(15),
cmno int(5),

primary key(sno),
foreign key(cmno) references cm(cmno));

insert into cm(cmname,age,gen) values
('Patel',56,'m'),
('Shinde',55,'m');


insert into state(sname,capcity,cmno) values
('Gujarat','Ahmedbad',1),
('Maharashtra','Mumbai',2);


SELECT *
FROM cm, state
WHERE cm.cmno = state.cmno


display statename along with its CM
SELECT sname,cmname
FROM state s, cm c
WHERE s.cmno = c.cmno;



concat method
SELECT CONCAT( ename, ' ', workmode ) AS 'Employee Details'
FROM exemp



q) display empname along with its category

salary>1500 platimun
salary>1150 GOLD
salary>1000 Silver
else		bronze

SELECT ename, salary,
CASE
WHEN salary >1500
THEN 'Platinum'
WHEN salary >1150
THEN 'Gold'
WHEN salary >1000
THEN 'Silver'
ELSE 'Bronze'
END AS 'Category'
FROM exemp


display headcount in each category
SELECT ename, salary,
CASE
WHEN salary >1500
THEN 'Platinum'
WHEN salary >1150
THEN 'Gold'
WHEN salary >1000
THEN 'Silver'
ELSE 'Bronze'
END AS 'Category', COUNT( * ) AS 'HeadCount'
FROM exemp
GROUP BY Category


q) display number of orders placed by customer AAKASH

SELECT COUNT( * ) AS 'Number Of Orders'
FROM customer, Orders
WHERE customer.cus_id = orders.cus_id
AND cus_name LIKE 'AAKASH'


q) display number of orders placed by customer AAKASH AND AMAN
SELECT COUNT( * ) AS 'Number Of Orders'
FROM customer, Orders
WHERE customer.cus_id = orders.cus_id
AND 
(cus_name LIKE 'AAKASH'
OR
cus_name LIKE 'AMAN')


SELECT COUNT( * ) AS 'Number Of Orders'
FROM customer, Orders
WHERE customer.cus_id = orders.cus_id
AND 
cus_name IN('AAKASH','AMAN');


inner join

SELECT *
FROM Customer
INNER JOIN Orders ON customer.cus_id = orders.cus_id


inner join + using
SELECT *
FROM Customer
INNER JOIN Orders
USING ( cus_id )


display datewise number of orders
SELECT ord_date, COUNT( * )
FROM Customer
INNER JOIN Orders
USING ( cus_id )
GROUP BY ord_date

display customer wise number of orders
SELECT cus_name, COUNT( * ) AS 'Number of Orders'
FROM Customer
INNER JOIN Orders
USING ( cus_id )
GROUP BY cus_name

display customer wise number of orders along with category of customer
if total order placed ==2 GOLD cus
if total order placed ==1 SILVER cus

SELECT cus_name, COUNT( * ) AS 'Number of Orders',
CASE
WHEN COUNT( * ) =2
THEN 'GOLD'
WHEN COUNT( * ) =1
THEN 'SILVER'
END AS 'Category'
FROM Customer
INNER JOIN Orders
USING ( cus_id )
GROUP BY cus_name


display names of customers who have not placed any order yet

SELECT cus_name
FROM Customer
LEFT JOIN Orders
USING ( cus_id )
WHERE ord_id IS NULL


display player name and Captian name
SELECT i1.pname AS 'Player Name', i2.pname AS 'Captian Name'
FROM ipl i1, ipl i2
WHERE i1.captianjno = i2.jno


SELECT *
FROM student1
UNION
SELECT *
FROM student2

SELECT *
FROM student1
UNION ALL
SELECT *
FROM student2


SELECT *
FROM student1
INTERSECT
SELECT *
FROM student2

SELECT *
FROM student1
MINUS
SELECT *
FROM student2


M to M
create table actor(
ano int(5),
aname varchar(10),
age int(3),
primary key(ano));

create table movie(
mno int(5),
mname varchar(10),
ryear int(3),
primary key(mno));


create table bollywood(
ano int(5),
mno int(5),
fees int(5),
foreign key(ano) references actor(ano),
foreign key(mno) references movie(mno)
);


insert into actor values
(1,'SRK',57),
(2,'AK',54),
(3,'DP',41);


insert into movie values
(1,'CE',2010),
(2,'Don',2007),
(3,'Welcome',2017)

display movienames of actor SRK

select mname
from
Actor,Movie,Bollywood
where
actor.ano=bollywood.ano
and
movie.mno=bollywood.mno
and
aname like 'SRK';


display actor wise movie count

SELECT aname,count(*) as 'Number of movies'
FROM Actor
INNER JOIN Bollywood
USING ( ano )
JOIN Movie
USING ( mno )
group by aname;
